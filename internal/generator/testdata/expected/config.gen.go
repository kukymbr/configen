// Package testdata contains configuration read-only provider.
//
// Code generated by github.com/kukymbr/configen; DO NOT EDIT.
// Generator version: unknown (revision unknown, built at 2025-10-04 00:00:00)
package testdata

import ()

type Apiconfig struct {
	host string
	port int
}

func (c Apiconfig) Host() string {
	return c.host
}

func (c Apiconfig) Port() int {
	return c.port
}

// Constructor for Apiconfig.
func NewApiconfig(dto APIConfig) Apiconfig {
	return Apiconfig{
		host: dto.Host,
		port: dto.Port,
	}
}

type AppConfig struct {
	instanceId string
	env        string
	namespace  string
	domain     string
}

func (c AppConfig) InstanceID() string {
	return c.instanceId
}

func (c AppConfig) Env() string {
	return c.env
}

func (c AppConfig) Namespace() string {
	return c.namespace
}

func (c AppConfig) Domain() string {
	return c.domain
}

// Constructor for AppConfig.
func NewAppConfig(dto AppConfig) AppConfig {
	return AppConfig{
		instanceId: dto.InstanceID,
		env:        dto.Env,
		namespace:  dto.Namespace,
		domain:     dto.Domain,
	}
}

type ConfigProvider struct {
	app    AppConfig
	logger LoggerConfig
	api    Apiconfig
}

// App is an application common settings.
func (c ConfigProvider) App() AppConfig {
	return c.app
}

// Logger is a logging setup values.
func (c ConfigProvider) Logger() LoggerConfig {
	return c.logger
}

// API is an API server configuration.
func (c ConfigProvider) API() Apiconfig {
	return c.api
}

// Constructor for ConfigProvider.
func NewConfigProvider(dto Config) ConfigProvider {
	return ConfigProvider{
		app:    NewAppConfig(dto.App),
		logger: NewLoggerConfig(dto.Logger),
		api:    NewApiconfig(dto.API),
	}
}

type GenericAppConfig struct {
	instanceId string
}

func (c GenericAppConfig) InstanceID() string {
	return c.instanceId
}

// Constructor for GenericAppConfig.
func NewGenericAppConfig(dto GenericAppConfig) GenericAppConfig {
	return GenericAppConfig{
		instanceId: dto.InstanceID,
	}
}

type LoggerConfig struct {
	level LogLevel
}

func (c LoggerConfig) Level() LogLevel {
	return c.level
}

// Constructor for LoggerConfig.
func NewLoggerConfig(dto LoggerConfig) LoggerConfig {
	return LoggerConfig{
		level: dto.Level,
	}
}
