// Package example contains configuration read-only provider.
//
// Code generated by github.com/kukymbr/configen; DO NOT EDIT.
// Generator version: unknown (revision unknown, built at 2025-10-04 00:00:00)
package example

import (
	"github.com/kukymbr/configen/example/exampletype"
	"net/http"
	"time"
)

type APIConfig struct {
	host       string
	port       int
	secret     string
	reqTTL     time.Duration
	respTTL    time.Duration
	defaultReq *http.Request

	origin any
}

func (c APIConfig) Host() string {
	return c.host
}

func (c APIConfig) Port() int {
	return c.port
}

func (c APIConfig) Secret() string {
	return c.secret
}

func (c APIConfig) ReqTTL() time.Duration {
	return c.reqTTL
}

func (c APIConfig) RespTTL() time.Duration {
	return c.respTTL
}

func (c APIConfig) DefaultReq() *http.Request {
	return c.defaultReq
}

// NewAPIConfig is a constructor converting apiConfig into the APIConfig.
func NewAPIConfig(dto apiConfig) APIConfig {
	return APIConfig{
		host:       dto.Host,
		port:       dto.Port,
		secret:     dto.Secret,
		reqTTL:     dto.ReqTTL,
		respTTL:    dto.RespTTL,
		defaultReq: dto.DefaultReq,

		origin: dto,
	}
}

type AppConfig struct {
	instanceID  string
	baseTraceID int
	env         string
	namespace   string
	domain      string
	externalArg exampletype.KeyVal

	origin any
}

func (c AppConfig) InstanceID() string {
	return c.instanceID
}

func (c AppConfig) BaseTraceID() int {
	return c.baseTraceID
}

// Env Application environment mode: development|production
func (c AppConfig) Env() string {
	return c.env
}

// Namespace Environment namespace (e.g. "dev1")
func (c AppConfig) Namespace() string {
	return c.namespace
}

// Domain Top-level domain for the cookies
func (c AppConfig) Domain() string {
	return c.domain
}

// ExternalArg is an example of custom type handling.
func (c AppConfig) ExternalArg() exampletype.KeyVal {
	return c.externalArg
}

// NewAppConfig is a constructor converting appConfig into the AppConfig.
func NewAppConfig(dto appConfig) AppConfig {
	return AppConfig{
		instanceID:  dto.InstanceID,
		baseTraceID: dto.BaseTraceID,
		env:         dto.Env,
		namespace:   dto.Namespace,
		domain:      dto.Domain,
		externalArg: dto.ExternalArg,

		origin: dto,
	}
}

type Config struct {
	app         AppConfig
	logger      LoggerConfig
	api         APIConfig
	externalArg exampletype.KeyVal

	origin any
}

// App is an application common settings.
func (c Config) App() AppConfig {
	return c.app
}

// Logger is a logging setup values.
func (c Config) Logger() LoggerConfig {
	return c.logger
}

// API is an API server configuration.
func (c Config) API() APIConfig {
	return c.api
}

// ExternalArg is an example of custom type handling.
func (c Config) ExternalArg() exampletype.KeyVal {
	return c.externalArg
}

// NewConfig is a constructor converting config into the Config.
func NewConfig(dto config) Config {
	return Config{
		app:         NewAppConfig(dto.App),
		logger:      NewLoggerConfig(dto.Logger),
		api:         NewAPIConfig(dto.API),
		externalArg: dto.ExternalArg,

		origin: dto,
	}
}

type GenericAppConfig struct {
	instanceID  string
	baseTraceID int

	origin any
}

func (c GenericAppConfig) InstanceID() string {
	return c.instanceID
}

func (c GenericAppConfig) BaseTraceID() int {
	return c.baseTraceID
}

type LoggerConfig struct {
	level         LogLevel
	defaultFields struct {
		traceID string
		values  map[string]any
	}

	origin any
}

func (c LoggerConfig) Level() LogLevel {
	return c.level
}

func (c LoggerConfig) DefaultFields() struct {
	traceID string
	values  map[string]any
} {
	return c.defaultFields
}

// NewLoggerConfig is a constructor converting loggerConfig into the LoggerConfig.
func NewLoggerConfig(dto loggerConfig) LoggerConfig {
	return LoggerConfig{
		level: dto.Level,
		defaultFields: struct {
			traceID string
			values  map[string]any
		}{
			traceID: dto.DefaultFields.TraceID,
			values:  dto.DefaultFields.Values,
		},

		origin: dto,
	}
}

type LoggerConfigDefaultFieldsProvider struct {
	traceID string
	values  map[string]any

	origin any
}

func (c LoggerConfigDefaultFieldsProvider) TraceID() string {
	return c.traceID
}

func (c LoggerConfigDefaultFieldsProvider) Values() map[string]any {
	return c.values
}
