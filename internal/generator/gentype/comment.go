package gentype

import (
	"go/ast"
	"go/token"
	"regexp"
	"strings"

	"golang.org/x/tools/go/packages"
)

func GetDocComment(symbol string, structName string, doc string) string {
	rxGodoc := regexp.MustCompile(`^` + structName + ` godoc\s`)

	doc = strings.TrimSpace(doc)
	doc = rxGodoc.ReplaceAllString(doc, "")
	doc = strings.TrimSpace(doc)

	symbol += " "

	comment := strings.Builder{}

	if doc != "" {
		comment.WriteString(symbol)
		comment.WriteString(strings.ReplaceAll(doc, "\n", "\n"+symbol) + "\n\n")
	}

	comment.WriteString(symbol)
	comment.WriteString("This file is generated by github.com/kukymbr/configen.\n")
	comment.WriteString(symbol)
	comment.WriteString("Source struct: " + structName + "\n\n")

	return comment.String()
}

func GetStructDocComment(pkg *packages.Package, structName string) string {
	for _, f := range pkg.Syntax {
		for _, decl := range f.Decls {
			gen, ok := decl.(*ast.GenDecl)
			if !ok {
				continue
			}

			for _, spec := range gen.Specs {
				ts, ok := spec.(*ast.TypeSpec)
				if !ok || ts.Name.Name != structName {
					continue
				}

				if gen.Doc != nil {
					return strings.TrimSpace(gen.Doc.Text())
				}
			}
		}
	}

	return ""
}

func CollectComments(pkg *packages.Package) map[token.Pos]string {
	out := map[token.Pos]string{}

	for _, f := range pkg.Syntax {
		for _, decl := range f.Decls {
			gen, ok := decl.(*ast.GenDecl)
			if !ok {
				continue
			}

			for _, spec := range gen.Specs {
				ts, ok := spec.(*ast.TypeSpec)
				if !ok {
					continue
				}

				st, ok := ts.Type.(*ast.StructType)
				if !ok {
					continue
				}

				for _, field := range st.Fields.List {
					if field.Doc != nil {
						out[field.Pos()] = strings.TrimSpace(field.Doc.Text())
					} else if field.Comment != nil {
						out[field.Pos()] = strings.TrimSpace(field.Comment.Text())
					}
				}
			}
		}
	}

	return out
}
