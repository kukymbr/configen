// Package example contains configuration read-only provider.
//
// Code generated by github.com/kukymbr/configen; DO NOT EDIT.
// Generator version: unknown (revision unknown, built at 2025-10-04 00:00:00)
package example

import (
	"net/http"

	"time"
)

type APIConfig struct {
	host       string
	port       int
	secret     string
	reqTTL     time.Duration
	respTTL    time.Duration
	defaultReq *http.Request
}

func (c APIConfig) Host() string {
	return c.host
}

func (c APIConfig) Port() int {
	return c.port
}

func (c APIConfig) Secret() string {
	return c.secret
}

func (c APIConfig) ReqTTL() time.Duration {
	return c.reqTTL
}

func (c APIConfig) RespTTL() time.Duration {
	return c.respTTL
}

func (c APIConfig) DefaultReq() *http.Request {
	return c.defaultReq
}

// Constructor for APIConfig.
func NewAPIConfig(dto apiConfig) APIConfig {
	return APIConfig{
		host:       dto.Host,
		port:       dto.Port,
		secret:     dto.Secret,
		reqTTL:     dto.ReqTTL,
		respTTL:    dto.RespTTL,
		defaultReq: dto.DefaultReq,
	}
}

type AppConfig struct {
	instanceID  string
	baseTraceID int
	env         string
	namespace   string
	domain      string
}

func (c AppConfig) InstanceID() string {
	return c.instanceID
}

func (c AppConfig) BaseTraceID() int {
	return c.baseTraceID
}

// Application environment mode: development|production
func (c AppConfig) Env() string {
	return c.env
}

// Environment namespace (e.g. "dev1")
func (c AppConfig) Namespace() string {
	return c.namespace
}

// Top-level domain for the cookies
func (c AppConfig) Domain() string {
	return c.domain
}

// Constructor for AppConfig.
func NewAppConfig(dto appConfig) AppConfig {
	return AppConfig{
		instanceID:  dto.InstanceID,
		baseTraceID: dto.BaseTraceID,
		env:         dto.Env,
		namespace:   dto.Namespace,
		domain:      dto.Domain,
	}
}

type Config struct {
	app    AppConfig
	logger LoggerConfig
	api    APIConfig
}

// App is an application common settings.
func (c Config) App() AppConfig {
	return c.app
}

// Logger is a logging setup values.
func (c Config) Logger() LoggerConfig {
	return c.logger
}

// API is an API server configuration.
func (c Config) API() APIConfig {
	return c.api
}

// Constructor for Config.
func NewConfig(dto config) Config {
	return Config{
		app:    NewAppConfig(dto.App),
		logger: NewLoggerConfig(dto.Logger),
		api:    NewAPIConfig(dto.API),
	}
}

type GenericAppConfig struct {
	instanceID  string
	baseTraceID int
}

func (c GenericAppConfig) InstanceID() string {
	return c.instanceID
}

func (c GenericAppConfig) BaseTraceID() int {
	return c.baseTraceID
}

// Constructor for GenericAppConfig.
func NewGenericAppConfig(dto genericAppConfig) GenericAppConfig {
	return GenericAppConfig{
		instanceID:  dto.InstanceID,
		baseTraceID: dto.BaseTraceID,
	}
}

type LoggerConfig struct {
	level         LogLevel
	defaultFields any
}

func (c LoggerConfig) Level() LogLevel {
	return c.level
}

func (c LoggerConfig) DefaultFields() any {
	return c.defaultFields
}

// Constructor for LoggerConfig.
func NewLoggerConfig(dto loggerConfig) LoggerConfig {
	return LoggerConfig{
		level:         dto.Level,
		defaultFields: dto.DefaultFields,
	}
}
